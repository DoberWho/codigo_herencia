package com.ubu.ws;

import java.util.ArrayList;
import java.util.List;

import javax.jws.WebService;

import org.joda.time.DateTime;

import com.ubu.models.Actividad;
import com.ubu.models.Participaciones;
import com.ubu.models.dao.ActividadDAO;
import com.ubu.models.dao.ParticipacionesDAO;
import com.ubu.models.dao.common.GenericDAO;

//Service Implementation
@WebService(endpointInterface = "com.ubu.ws.ActividadesGimnasio")
public class ActividadesGimnasioImpl implements ActividadesGimnasio {

	@Override
	public String getHelloWorldAsString(String name) {
		return "Testing " + name;
	}

	@Override
	public float consultarMediaPuntuacionActividades() {

		List<GenericDAO> daoItems = (new ParticipacionesDAO()).list();
		if (daoItems == null || daoItems.isEmpty()) {
			return 0;
		}

		int count = daoItems.size();
		Long sumVal = 0L;

		for (GenericDAO dao : daoItems) {
			Participaciones item = (Participaciones) dao.getItem();
			sumVal = sumVal + item.getVotacion();
		}

		return (sumVal / count);
	}

	@Override
	public float consultarMediaPuntuacionActividades(DateTime fechaInicio, DateTime fechaFin) {

		List<GenericDAO> daoItems = (new ParticipacionesDAO()).list();
		if (daoItems == null || daoItems.isEmpty()) {
			return 0;
		}

		int count = daoItems.size();
		Long sumVal = 0L;

		for (GenericDAO dao : daoItems) {
			Participaciones item = (Participaciones) dao.getItem();

			ActividadDAO obj = (ActividadDAO) (new ActividadDAO()).getByid(item.getIdActividad());
			Actividad act = obj.getItem();
			if (!act.enFecha(fechaInicio, fechaFin)) {
				continue;
			}

			sumVal = sumVal + item.getVotacion();
		}

		return (sumVal / count);
	}

	@Override
	public int consultarPlazasLibresActividad(int idActividad) {
		int max = 20; // Maximas plazas permitidas
		int plazas = (new ParticipacionesDAO()).getPlazas(idActividad);
		return (max - plazas);
	}

	@Override
	public int consultarNumeroInscritosActividad(int idActividad) {
		return (new ParticipacionesDAO()).getPlazas(idActividad);
	}

	@Override
	public Actividad consultarActividadMejorPuntuada() {

		Long id = (new ParticipacionesDAO()).getIdMejorPuntuacion();
		ActividadDAO obj = (ActividadDAO) (new ActividadDAO()).getByid(id);
		Actividad item = obj.getItem();

		return item;
	}

	@Override
	public Actividad consultarActividadMejorPuntuada(DateTime fechaInicio, DateTime fechaFin) {

		Long id = (new ParticipacionesDAO()).getIdMejorPuntuacion(fechaInicio, fechaFin);
		ActividadDAO obj = (ActividadDAO) (new ActividadDAO()).getByid(id);
		Actividad item = obj.getItem();

		return item;
	}

	@Override
	public List<Actividad> consultarActividadesConPlazas() {

		List<Actividad> items = new ArrayList<Actividad>();
		List<Long> ids = (new ParticipacionesDAO()).getConPlazas();
		for (Long id : ids) {
			ActividadDAO obj = (ActividadDAO) (new ActividadDAO()).getByid(id);
			items.add(obj.getItem());
		}

		return items;
	}

	@Override
	public List<Actividad> consultarActividadesConPlazasLibres(DateTime fechaInicio, DateTime fechaFin) {
		List<Actividad> items = new ArrayList<Actividad>();
		List<Long> ids = (new ParticipacionesDAO()).getConPlazas();
		for (Long id : ids) {
			ActividadDAO obj = (ActividadDAO) (new ActividadDAO()).getByid(id);
			Actividad act = obj.getItem();
			if (!act.enFecha(fechaInicio, fechaFin)) {
				continue;
			}
			items.add(act);
		}

		return items;
	}

	@Override
	public List<String> consultar() {
		List<GenericDAO> items = (new ActividadDAO()).list();
		return null;
	}

}